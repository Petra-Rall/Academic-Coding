--Full Table
CREATE TABLE DrugFullInfo (
    drug_id                   NUMBER,
    drug_name                 VARCHAR2(200),
    
    side_effect1              VARCHAR2(200),
    side_effect2              VARCHAR2(200),
    side_effect3              VARCHAR2(200),
    side_effect4              VARCHAR2(200),
    side_effect5              VARCHAR2(200),
    
    interacts_with1           VARCHAR2(200),
    interacts_with2           VARCHAR2(200),
    interacts_with3           VARCHAR2(200),
    
    disease_name              VARCHAR2(200),
    disease_category          VARCHAR2(100),
    
    drug_category             VARCHAR2(100),
    
    product_name              VARCHAR2(200),
    company_name              VARCHAR2(200),
    
    clinical_trial_title      VARCHAR2(300),
    clinical_trial_start_date DATE,
    clinical_trial_completion_date DATE,
    clinical_trial_participants NUMBER,
    clinical_trial_status     VARCHAR2(100),
    
    clinical_trial_condition1 VARCHAR2(200),
    clinical_trial_condition2 VARCHAR2(200),
    clinical_trial_condition3 VARCHAR2(200),
    
    clinical_trial_address1   VARCHAR2(200),
    clinical_trial_institution VARCHAR2(200),
    clinical_trial_address2   VARCHAR2(200),
    
    clinical_trial_main_researcher VARCHAR2(200)
);


-- 1. Drug Table
CREATE TABLE DRUG (
    drug_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    drug_name VARCHAR2(100) NOT NULL,
    drug_category VARCHAR2(100)
);

INSERT INTO DRUG (drug_name, drug_category)
SELECT dfi.drug_name, dfi.drug_category
FROM drugfullinfo dfi
WHERE dfi.drug_name IS NOT NULL
  AND NOT EXISTS (
    SELECT 'X'
    FROM DRUG d
    WHERE d.drug_name = dfi.drug_name
);
commit;

UPDATE DRUGFULLINFO dfi
SET drug_id = (
    SELECT d.drug_id
    FROM DRUG d
    WHERE d.drug_name = dfi.drug_name
      AND d.drug_category = dfi.drug_category
)
WHERE drug_id IS NULL;

-- 2. SideEffect Table
CREATE TABLE SideEffects (
    drug_id NUMBER,
    side_effect VARCHAR2(100),
    FOREIGN KEY (drug_id) REFERENCES Drug(drug_id)
);

INSERT INTO SideEffects (drug_id, side_effect)
SELECT DISTINCT dfi.drug_id, dfi.side_effect5
FROM DRUGFULLINFO dfi
WHERE dfi.drug_id IS NOT NULL
AND NOT EXISTS (
    SELECT 1
    FROM SideEffects se
    WHERE se.drug_id = dfi.drug_id
      AND (
          (se.side_effect = dfi.side_effect5) OR
          (se.side_effect IS NULL AND dfi.side_effect5 IS NULL)
      )
);




-- 3. InteractWith Table
CREATE TABLE InteractWith (
    drug_id NUMBER,
    interacts_with VARCHAR2(100),
    FOREIGN KEY (drug_id) REFERENCES Drug(drug_id)
);

INSERT INTO InteractWith (drug_id, interacts_with)
SELECT DISTINCT dfi.drug_id, dfi.interacts_with2
FROM DRUGFULLINFO dfi
WHERE dfi.drug_id IS NOT NULL
AND NOT EXISTS (
    SELECT 1
    FROM InteractWith iw
    WHERE iw.drug_id = dfi.drug_id
      AND (
          (iw.interacts_with = dfi.INTERACTS_WITH2) OR
          (iw.interacts_with IS NULL AND dfi.interacts_with2 IS NULL)
      )
);


-- 4. MainResearcher Table
--CREATE TABLE MainResearcher (
--    name VARCHAR2(100) PRIMARY KEY
--);

--INSERT INTO MAINRESEARCHER
--SELECT DISTINCT CLINICAL_TRIAL_MAIN_RESEARCHER 
--FROM DRUGFULLINFO
--WHERE CLINICAL_TRIAL_MAIN_RESEARCHER IS NOT NULL;

-- 5. Address Table
CREATE TABLE Address (
    address_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    country VARCHAR2(100),
    institution VARCHAR2(100),
    department VARCHAR2(100)
);

INSERT INTO Address (country, institution, department)
SELECT DISTINCT CLINICAL_TRIAL_ADDRESS1, CLINICAL_TRIAL_INSTITUTION, CLINICAL_TRIAL_ADDRESS2
FROM DRUGFULLINFO
WHERE NOT (
    CLINICAL_TRIAL_ADDRESS1 IS NULL AND
    CLINICAL_TRIAL_INSTITUTION IS NULL AND
    CLINICAL_TRIAL_ADDRESS2 IS NULL
);



-- 6. ClinicalTrial Table
CREATE TABLE ClinicalTrial (
    trial_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200),
    start_date DATE,
    completion_date DATE,
    participants NUMBER,
    status VARCHAR2(100),
    main_researcher_name VARCHAR2(100),
    address_id NUMBER,
    drug_id NUMBER,
    FOREIGN KEY (address_id) REFERENCES Address(address_id),
    FOREIGN KEY (drug_id) REFERENCES Drug(drug_id)
);

INSERT INTO ClinicalTrial (
    title,
    start_date,
    completion_date,
    participants,
    status,
    main_researcher_name,
    address_id,
    drug_id
)
SELECT DISTINCT
    dfi.clinical_trial_title,
    dfi.clinical_trial_start_date,
    dfi.clinical_trial_completion_date,
    dfi.clinical_trial_participants,
    dfi.clinical_trial_status,
    dfi.clinical_trial_main_researcher,
    a.address_id,
    d.drug_id
FROM DrugFullInfo dfi
JOIN Address a ON
    a.country = dfi.clinical_trial_address1 AND
    a.institution = dfi.clinical_trial_institution AND
    a.department = dfi.clinical_trial_address2
JOIN Drug d ON
    d.drug_name = dfi.drug_name AND
    d.drug_category = dfi.drug_category
WHERE dfi.clinical_trial_title IS NOT NULL;


-- 7. Condition Table (Multiple per trial)
CREATE TABLE Conditions (
    trial_id NUMBER,
    condition VARCHAR2(200),
    FOREIGN KEY (trial_id) REFERENCES ClinicalTrial(trial_id)
);
INSERT INTO Conditions (trial_id, condition)
SELECT DISTINCT ct.trial_id, dfi.clinical_trial_condition3
FROM ClinicalTrial ct
JOIN DrugFullInfo dfi ON ct.drug_id = dfi.drug_id
WHERE dfi.clinical_trial_condition3 IS NOT NULL;


-- 8. Disease Table



-- 9. Product Table
CREATE TABLE Product (
    PID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    drug_id NUMBER,
    name VARCHAR2(100),
    company VARCHAR2(100),
    FOREIGN KEY (drug_id) REFERENCES Drug(drug_id)
);

INSERT INTO Product (drug_id, name, company)
SELECT DISTINCT
    dfi.drug_id,
    dfi.product_name,
    dfi.company_name
FROM DrugFullInfo dfi
JOIN Drug d ON d.drug_id = dfi.drug_id
WHERE dfi.product_name IS NOT NULL;


-- 10. Disease
CREATE TABLE Disease (
    drug_id NUMBER,
    disease_name VARCHAR2(100),
    disease_category VARCHAR2(100),
    FOREIGN KEY (drug_id) REFERENCES Drug(drug_id)
);

INSERT INTO DISEASE
SELECT DISTINCT d.drug_id, dfi.disease_name, dfi.disease_category
FROM DrugFullInfo dfi
JOIN Drug d 
ON d.drug_id = dfi.drug_id AND d.drug_name = dfi.drug_name AND d.drug_category = dfi.drug_category
WHERE dfi.disease_name IS NOT NULL;


-- 11. Drug_Makes_Product


---------------------------------------
DELETE FROM Drug_Makes_Product;
DELETE FROM Conditions;
DELETE FROM ClinicalTrial;
DELETE FROM Address;
DELETE FROM MainResearcher;
DELETE FROM Product;
DELETE FROM Disease;
DELETE FROM InteractWith;
DELETE FROM SideEffects;
DELETE FROM Drug;
commit;
DELETE DRUGFULLINFO;
commit;
Select *
From drugfullinfo;
DROP TABLE DRUGFULLINFO;
commit;

DROP TABLE Drug_Makes_Product;
DROP TABLE Conditions;
DROP TABLE ClinicalTrial;
DROP TABLE Address;
DROP TABLE MainResearcher;
DROP TABLE Product;
DROP TABLE Disease;
DROP TABLE InteractWith;
DROP TABLE SideEffects;
DROP TABLE Drug;
DROP TABLE DRUGFULLINFO;
commit;

ALTER TABLE DRUGFULLINFO ADD (
    
);


SELECT * FROM Drug_Makes_Product;
SELECT * FROM Drug_Treats_Disease;
SELECT * FROM Conditions;
SELECT * FROM ClinicalTrial;
SELECT * FROM Address;
SELECT * FROM MainResearcher;
SELECT * FROM Product;
SELECT * FROM Disease;
SELECT * FROM InteractWith;
SELECT * FROM SideEffects;
SELECT * FROM Drug;
commit;