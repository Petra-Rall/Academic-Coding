custom_colors <- c("#4394E5", "#87BB62", "#F5921B", "#876FD4")
# Plot the pie chart without labels
pie(count$n, labels = "", main = "Pie Chart of Race Distribution",
col = custom_colors, border = "black", radius = 1.2)
# Add percentages inside the pie chart
percent_labels <- paste(count$percentage, "%")
text(x = c(0, 1, -1, 0, -0.7), y = c(1, 0, 0, -1, 0.7),
labels = percent_labels, col = "black", cex = 0.5)
# Add a legend outside the pie chart
legend(x=1.5,y=1, legend = labels_legend, fill = custom_colors, cex = 0.5)
library(dplyr)
race <- plotdata$race
# count <- Marriage %>% count(race)
count <- plotdata$n
percentage <- round(count/sum(count)*100,1)
colors <- c("#4394E5", "#87BB62", "#F5921B", "#876FD4")
pie(count,
labels=paste(race,"-", percentage,"%"),
col=colors,border="black",
family="serif",
col.main = "#3D3838",
main="Pie Chart",
radius = 1.2,
cex=0.7)
library(dplyr)
# Sample data (replace this with your actual dataset)
race <- Marriage$race
# Count the occurrences of each race
count <- Marriage %>% count(race)
# Calculate the percentage
count$percentage <- round((count$n / sum(count$n)) * 100, 1)
# Create pie chart labels for the legend
labels_legend <- paste(count$race)
# Custom colors for each segment
custom_colors <- c("#4394E5", "#87BB62", "#F5921B", "#876FD4")
# Plot the pie chart without labels
pie(count$n, labels = "", main = "Pie Chart of Race Distribution",
col = custom_colors, border = "black", radius = 1.2)
# Add percentages inside the pie chart
percent_labels <- paste(count$percentage, "%")
text(x = c(0, 1, -1, 0, -0.7), y = c(1, 0, 0, -1, 0.7),
labels = percent_labels, col = "black", cex = 0.5)
# Add a legend outside the pie chart
legend(x=1.5,y=1, legend = labels_legend, fill = custom_colors, cex = 0.5)
library(dplyr)
# Sample data (replace this with your actual dataset)
race <- Marriage$race
# Count the occurrences of each race
count <- Marriage %>% count(race)
# Calculate the percentage
count$percentage <- round((count$n / sum(count$n)) * 100, 1)
# Create pie chart labels for the legend
labels_legend <- paste(count$race)
# Custom colors for each segment
custom_colors <- c("#4394E5", "#87BB62", "#F5921B", "#876FD4")
# Plot the pie chart without labels
pie(count$n, labels = "", main = "Pie Chart of Race Distribution",
col = custom_colors, border = "black", radius = 1.2)
# Add percentages inside the pie chart
percent_labels <- paste(count$percentage, "%")
text(
labels = percent_labels, col = "black", cex = 0.5)
library(dplyr)
# Sample data (replace this with your actual dataset)
race <- Marriage$race
# Count the occurrences of each race
count <- Marriage %>% count(race)
# Calculate the percentage
count$percentage <- round((count$n / sum(count$n)) * 100, 1)
# Create pie chart labels for the legend
labels_legend <- paste(count$race)
# Custom colors for each segment
custom_colors <- c("#4394E5", "#87BB62", "#F5921B", "#876FD4")
# Plot the pie chart without labels
pie(count$n, labels = "", main = "Pie Chart of Race Distribution",
col = custom_colors, border = "black", radius = 1.2)
# Add percentages inside the pie chart
percent_labels <- paste(count$percentage, "%")
text(x=0,y=0
labels = percent_labels, col = "black", cex = 0.5)
library(dplyr)
# Sample data (replace this with your actual dataset)
race <- Marriage$race
# Count the occurrences of each race
count <- Marriage %>% count(race)
# Calculate the percentage
count$percentage <- round((count$n / sum(count$n)) * 100, 1)
# Create pie chart labels for the legend
labels_legend <- paste(count$race)
# Custom colors for each segment
custom_colors <- c("#4394E5", "#87BB62", "#F5921B", "#876FD4")
# Plot the pie chart without labels
pie(count$n, labels = "", main = "Pie Chart of Race Distribution",
col = custom_colors, border = "black", radius = 1.2)
# Add percentages inside the pie chart
percent_labels <- paste(count$percentage, "%")
text(x=0,y=0,
labels = percent_labels, col = "black", cex = 0.5)
# Add a legend outside the pie chart
legend(x=1.5,y=1, legend = labels_legend, fill = custom_colors, cex = 0.5)
library(dplyr)
# Sample data (replace this with your actual dataset)
race <- Marriage$race
# Count the occurrences of each race
count <- Marriage %>% count(race)
# Calculate the percentage
count$percentage <- round((count$n / sum(count$n)) * 100, 1)
# Create pie chart labels for the legend
labels_legend <- paste(count$race)
# Custom colors for each segment
custom_colors <- c("#4394E5", "#87BB62", "#F5921B", "#876FD4")
# Plot the pie chart without labels
pie_data <- pie(count$n, labels = "", main = "Pie Chart of Race Distribution",
col = custom_colors, border = "black", radius = 1.2)
angles <- pie_data$angle + pie_data$angle[1]/2
x_pos <- 0.7 * cos(angles)  # Adjust 0.7 for distance from the center
y_pos <- 0.7 * sin(angles)
# Add percentages inside the pie chart
percent_labels <- paste(count$percentage, "%")
text(x = x_pos, y = y_pos,
labels = percent_labels, col = "black", cex = 0.5)
library(dplyr)
# Sample data (replace this with your actual dataset)
race <- Marriage$race
# Count the occurrences of each race
count <- Marriage %>% count(race)
# Calculate the percentage
count$percentage <- round((count$n / sum(count$n)) * 100, 1)
# Create pie chart labels for the legend
labels_legend <- paste(count$race)
# Custom colors for each segment
custom_colors <- c("#FF6347", "#FF7F50", "#FFD700", "#32CD32", "#8A2BE2")
# Pie chart without labels
pie_data <- pie(count$n, labels = "", main = "Pie Chart of Race Distribution",
col = custom_colors, border = "black", radius = 1.2)
# Calculate the angles for text placement
angles <- pie_data$angle + pie_data$angle[1]/2  # Midpoint angles for each slice
# Calculate the x and y positions for each percentage label
x_pos <- 0.7 * cos(angles)  # Adjust 0.7 for distance from the center
y_pos <- 0.7 * sin(angles)
# Add percentages inside the pie chart
percent_labels <- paste(count$percentage, "%")
text(x = x_pos, y = y_pos, labels = percent_labels, col = "white", font = 2, cex = 1.5)
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")  # Color palette from RColorBrewer
library(ggplot2)
# Data for the pie chart
data <- data.frame(
category = c("Category A", "Category B", "Category C", "Category D"),
value = c(25, 35, 20, 20)
)
# Calculate the percentage for each category
data$fraction = data$value / sum(data$value)
data$ymax = cumsum(data$fraction)  # cumulative sum of fractions
data$ymin = c(0, head(data$ymax, n=-1))  # starting point for each slice
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")  # Color palette from RColorBrewer
library(ggplot2)
# Data for the pie chart
data <- data.frame(
category = c("Category A", "Category B", "Category C", "Category D"),
value = c(25, 35, 20, 20)
)
# Calculate the percentage for each category
data$fraction = data$value / sum(data$value)
data$ymax = cumsum(data$fraction)  # cumulative sum of fractions
data$ymin = c(0, head(data$ymax, n=-1))  # starting point for each slice
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")+  # Color palette from RColorBrewer
geom_text(aes(x = 3.5,
y = (ymax + ymin) / 2,
label = paste0(round(fraction * 100, 1), "%")),
color = "white", size = 6)  # Add percentages as text
library(ggplot2)
# Data for the pie chart
data <- data.frame(
category = c("Category A", "Category B", "Category C", "Category D"),
value = c(25, 35, 20, 20)
)
# Calculate the percentage for each category
data$fraction = data$value / sum(data$value)
data$ymax = cumsum(data$fraction)  # cumulative sum of fractions
data$ymin = c(0, head(data$ymax, n=-1))  # starting point for each slice
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")+  # Color palette from RColorBrewer
geom_text(aes(x = 3.5,
y = (ymax + ymin) / 2,
label = paste0(round(fraction * 100, 1), "%")),
color = "black", size = 1)  # Add percentages as text
library(ggplot2)
# Data for the pie chart
data <- data.frame(
category = c("Category A", "Category B", "Category C", "Category D"),
value = c(25, 35, 20, 20)
)
# Calculate the percentage for each category
data$fraction = data$value / sum(data$value)
data$ymax = cumsum(data$fraction)  # cumulative sum of fractions
data$ymin = c(0, head(data$ymax, n=-1))  # starting point for each slice
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")+  # Color palette from RColorBrewer
geom_text(aes(x = 3.5,
y = (ymax + ymin) / 2,
label = paste0(round(fraction * 100, 1), "%")),
color = "black", size = 3)  # Add percentages as text
library(ggplot2)
# Data for the pie chart
data <- data.frame(
category = c("Category A", "Category B", "Category C", "Category D"),
value = c(25, 35, 20, 20)
)
# Calculate the percentage for each category
data$fraction = data$value / sum(data$value)
data$ymax = cumsum(data$fraction)  # cumulative sum of fractions
data$ymin = c(0, head(data$ymax, n=-1))  # starting point for each slice
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")+  # Color palette from RColorBrewer
geom_text(aes(x = 3.5,
y = (ymax + ymin) / 2,
label = paste0(round(fraction * 100, 1), "%")),
color = "black", size = 2)  # Add percentages as text
library(ggplot2)
# Data for the pie chart
data <- data.frame(
category = c("Category A", "Category B", "Category C", "Category D"),
value = c(25, 35, 20, 20)
)
# Calculate the percentage for each category
data$fraction = data$value / sum(data$value)
data$ymax = cumsum(data$fraction)  # cumulative sum of fractions
data$ymin = c(0, head(data$ymax, n=-1))  # starting point for each slice
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect() +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")+  # Color palette from RColorBrewer
geom_text(aes(x = 3.5,
y = (ymax + ymin) / 2,
label = paste0(round(fraction * 100, 1), "%")),
color = "black", size = 6)  # Add percentages as text
library(ggplot2)
# Data for the pie chart
data <- data.frame(
category = c("Category A", "Category B", "Category C", "Category D"),
value = c(25, 35, 20, 20)
)
# Calculate the percentage for each category
data$fraction = data$value / sum(data$value)
data$ymax = cumsum(data$fraction)  # cumulative sum of fractions
data$ymin = c(0, head(data$ymax, n=-1))  # starting point for each slice
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect(color="black") +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")+  # Color palette from RColorBrewer
geom_text(aes(x = 3.5,
y = (ymax + ymin) / 2,
label = paste0(round(fraction * 100, 1), "%")),
color = "black", size = 6)  # Add percentages as text
library(ggplot2)
#stacked bar chart
ggplot(mpg,aes(x=class, fill=drv))+
geom_bar(position="stack")
mpg
library(ggplot2)
#grouped bar chart
ggplot(mpg,aes(x=class, fill=drv))+
geom_bar(position="dodge")
# grouped bar plot preserving zero count bars
ggplot(mpg, aes(x = class, fill = drv)) +
geom_bar(position = position_dodge(preserve = "single"))
# Create the pie chart using ggplot2
ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = category)) +
geom_rect(color="black") +
coord_polar(theta = "y") +  # This transforms the plot into a pie chart
theme_void() +  # Clean up the background
theme(legend.title = element_blank()) +  # Remove legend title
labs(title = "Beautiful Pie Chart") +  # Add a title
scale_fill_brewer(palette = "Set3")+  # Color palette from RColorBrewer
geom_text(aes(x = 3.5,
y = (ymax + ymin) / 2,
label = paste0(round(fraction * 100, 1), "%")),
color = "black", size = 6)  # Add percentages as text
View(Marriage)
# plot the distribution of race
ggplot(Marriage, aes(x=race))+
geom_bar()
ggplot(Marriage, aes(x=race))+
geom_bar(fill="#1AC9E6", color="#1A7B8F")+
theme(text = element_text(color = "#241C1C"))+  # Legend title
labs(x="Race", y="Frequency", title="Participants by race")
library(ggplot2)
#bar plot,with each bar representing 100%
ggplot(mpg.aes(x=class,fill=drv))+
geom_bar(position="fill")+
labs(y="Proportion")
ggplot(mpg,aes(x=class,fill=drv))+
geom_bar(position="fill")+
labs(y="Proportion")
ggplot(mpg,aes(x=factor(class,
levels=c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")),
fill=factor(drv,
levels =c("f", "r", "4"),
levels=c("front-wheel", "rear-wheel", "4-wheel"))))+
geom_bar(position="fill")+
scale_y_continuous(breaks=seq(0,1,.2),
label=percent)+
scale_fill_brewer(palette="Set2")+
labs(y="Percent",
fill="Drive Train",
x="Class",
title="Automobile Drive by Class")+
theme_minimal()
# • factor modifies the order of the categories for the class variable and both the order and the labels for the drive variable
# • scale_y_continuous modifies the y-axis tick mark labels • labs provides a title and changed the labels for the x and y axes and the legend
# • scale_fill_brewer changes the fill color scheme
# • labs provides a title and changed the labels for the x and y axes and the legend
# • scale_fill_brewer changes the fill color scheme
# • theme_minimal removes the grey background and changed the grid color
library(ggplot2)
# bar plot, with each bar representing 100%,
# reordered bars, and better labels and color
library(scales)
ggplot(mpg,aes(x=factor(class,
levels=c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")),
fill=factor(drv,
levels =c("f", "r", "4"),
levels=c("front-wheel", "rear-wheel", "4-wheel"))))+
geom_bar(position="fill")+
scale_y_continuous(breaks=seq(0,1,.2),
label=percent)+
scale_fill_brewer(palette="Set2")+
labs(y="Percent",
fill="Drive Train",
x="Class",
title="Automobile Drive by Class")+
theme_minimal()
# • factor modifies the order of the categories for the class variable and both the order and the labels for the drive variable
# • scale_y_continuous modifies the y-axis tick mark labels • labs provides a title and changed the labels for the x and y axes and the legend
# • scale_fill_brewer changes the fill color scheme
# • labs provides a title and changed the labels for the x and y axes and the legend
# • scale_fill_brewer changes the fill color scheme
# • theme_minimal removes the grey background and changed the grid color
library(ggplot2)
# bar plot, with each bar representing 100%,
# reordered bars, and better labels and color
library(scales)
ggplot(mpg,aes(x=factor(class,
levels=c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")),
fill=factor(drv,
levels =c("f", "r", "4"),
labels=c("front-wheel", "rear-wheel", "4-wheel"))))+
geom_bar(position="fill")+
scale_y_continuous(breaks=seq(0,1,.2),
label=percent)+
scale_fill_brewer(palette="Set2")+
labs(y="Percent",
fill="Drive Train",
x="Class",
title="Automobile Drive by Class")+
theme_minimal()
# create a summary dataset
library(dplyr)
plotdata <- mpg %>%
group_by(class,drv) %>%
summarize(n=n()) %>%
mutate(pct=nsum(n), lbl = scales::percent(pct))
# create a summary dataset
library(dplyr)
plotdata <- mpg %>%
group_by(class,drv) %>%
summarize(n=n()) %>%
mutate(pct=sum(n), lbl = scales::percent(pct))
plotdata
# create a summary dataset
library(dplyr)
mpg <-mpg
plotdata <- mpg %>%
group_by(class,drv) %>%
summarize(n=n()) %>%
mutate(pct=sum(n), lbl = scales::percent(pct))
plotdata
View(mpg)
View(plotdata)
# create a summary dataset
library(dplyr)
mpg <-mpg
plotdata <- mpg %>%
group_by(class,drv) %>%
summarize(n=n()) %>%
mutate(pct=sum(n), lbl = scales::percent(pct))
plotdata
# create segmentedbar chart
# adding labels to each segment
ggplot(plotdata, aes(x=factor(class,
levels=c("2seater","subcompact", "compact","midsize", "minivan","suv","pickup")),
y=pct,
fill=factor(drv,
drv, levels =c("f","r","4"),
labels =c("front-wheel", "rear-wheel", "4-wheel"))))+
geom_bar(stat="identity",
position="fill")+
geom_text(aes(label =lbl), size =3, position=position_stack(vjust=0.5))+
scale_fill_brewer(palette ="Set2")+
labs(y="Percent", fill="Drive Train", x="Class", title="Automobile Driveby Class")+
theme_minimal()
ggplot(plotdata, aes(x=factor(class,
levels=c("2seater","subcompact", "compact","midsize", "minivan","suv","pickup")),
y=pct,
fill=factor(drv,
drv, levels =c("f","r","4"),
labels =c("front-wheel", "rear-wheel", "4-wheel"))))+
geom_bar(stat="identity",
position="fill")+
scale_y_continuous(breaks =seq(0,1,.2),
label =percent)+
geom_text(aes(label =lbl), size =3, position=position_stack(vjust=0.5))+
scale_fill_brewer(palette ="Set2")+
labs(y="Percent",
fill="Drive Train",
x="Class",
title="Automobile Driveby Class")+
theme_minimal()
ggplot(plotdata, aes(x=factor(class,
levels=c("2seater","subcompact", "compact","midsize", "minivan","suv","pickup")),
y=pct,
fill=factor(drv,
levels =c("f","r","4"),
labels =c("front-wheel", "rear-wheel", "4-wheel"))))+
geom_bar(stat="identity",
position="fill")+
scale_y_continuous(breaks =seq(0,1,.2),
label =percent)+
geom_text(aes(label =lbl),
size =3,
position=position_stack(vjust=0.5))+
scale_fill_brewer(palette ="Set2")+
labs(y="Percent",
fill="Drive Train",
x="Class",
title="Automobile Driveby Class")+
theme_minimal()
# create a summary dataset
library(dplyr)
plotdata <- mpg %>%
group_by(class,drv) %>%
summarize(n=n()) %>%
mutate(pct=n/sum(n), lbl = scales::percent(pct))
plotdata
# create segmentedbar chart
# adding labels to each segment
ggplot(plotdata, aes(x=factor(class,
levels=c("2seater","subcompact", "compact","midsize", "minivan","suv","pickup")),
y=pct,
fill=factor(drv,
levels =c("f","r","4"),
labels =c("front-wheel", "rear-wheel", "4-wheel"))))+
geom_bar(stat="identity",
position="fill")+
scale_y_continuous(breaks =seq(0,1,.2),
label =percent)+
geom_text(aes(label =lbl),
size =3,
position=position_stack(vjust=0.5))+
scale_fill_brewer(palette ="Set2")+
labs(y="Percent",
fill="Drive Train",
x="Class",
title="Automobile Driveby Class")+
theme_minimal()
